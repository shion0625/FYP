// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "For API Support",
            "email": "nikhilnarayanan623@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all user details",
                "tags": [
                    "User Profile"
                ],
                "summary": "Get User Profile (User)",
                "operationId": "GetProfile",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user details"
                    },
                    "500": {
                        "description": "Failed to retrieve user details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to edit user details",
                "tags": [
                    "User Profile"
                ],
                "summary": "Edit profile (User)",
                "operationId": "UpdateProfile",
                "parameters": [
                    {
                        "description": "User details input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.EditUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully profile updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid inputs",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update profile",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/account/address": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all user addresses",
                "tags": [
                    "User Profile"
                ],
                "summary": "Get all addresses (User)",
                "operationId": "GetAllAddresses",
                "responses": {
                    "200": {
                        "description": "successfully retrieved all user addresses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to show user addresses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to update user address",
                "tags": [
                    "User Profile"
                ],
                "summary": "Update address (User)",
                "operationId": "UpdateAddress",
                "parameters": [
                    {
                        "description": "Address input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.EditAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully addresses updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "can't update the address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to add a new address",
                "tags": [
                    "User Profile"
                ],
                "summary": "Add a new address (User)",
                "operationId": "SaveAddress",
                "parameters": [
                    {
                        "description": "Address input",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Address"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully address added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to save address",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/account/coupons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all coupons",
                "tags": [
                    "User Profile"
                ],
                "summary": "Get all user coupons (User)",
                "operationId": "GetAllCouponsForUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully\tfound\tall\tcoupons\tfor\tuser",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/account/wallet": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get user wallet",
                "tags": [
                    "User Profile"
                ],
                "summary": "Get user wallet  (User)",
                "operationId": "GetUserWallet",
                "responses": {
                    "200": {
                        "description": "Successfully retrieve user wallet",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve user wallet",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/account/wallet/transactions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get user wallet transaction",
                "tags": [
                    "User Profile"
                ],
                "summary": "Get user wallet  (User)",
                "operationId": "GetUserWalletTransactions",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user wallet transactions",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No wallet transaction for user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve user wallet transactions",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/account/wishlist": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "User Profile"
                ],
                "summary": "Get whish list product items (User)",
                "operationId": "GetWishList",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all product items in th wish list"
                    },
                    "500": {
                        "description": "Failed to retrieve product items from the wish list"
                    }
                }
            }
        },
        "/account/wishlist/{product_item_id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "User Profile"
                ],
                "summary": "Add to whish list (User)",
                "operationId": "SaveToWishList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product Item ID",
                        "name": "product_item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully product items added to whish list",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Product item already exist on wish list",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to add product item to wishlist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "User Profile"
                ],
                "summary": "Remove from whish list (User)",
                "operationId": "RemoveFromWishList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product Item ID",
                        "name": "product_item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully removed product item from wishlist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/auth/renew-access-token": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "API for admin to renew access token using refresh token",
                "tags": [
                    "Admin Authentication"
                ],
                "summary": "Renew Access Token (Admin)",
                "operationId": "AdminRenewAccessToken",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully generated access token using refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Refresh token blocked",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "No session found for the given refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "410": {
                        "description": "Refresh token expired",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed generate access token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/auth/sign-in": {
            "post": {
                "description": "API for admin to login with password",
                "tags": [
                    "Admin Authentication"
                ],
                "summary": "Login with password (Admin)",
                "operationId": "AdminLogin",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.TokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Wrong password",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Admin not exist with this details",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to login",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/brands": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to find all brands",
                "tags": [
                    "Admin Brand"
                ],
                "summary": "Find All Brand",
                "operationId": "FindAllBrands",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully found all brands",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "there is no brands to show",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to find brand",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to save new brand",
                "tags": [
                    "Admin Brand"
                ],
                "summary": "Save Brand",
                "operationId": "SaveBrand",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Brand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully brand created",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "brand name already exist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to create brand",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/brands/{brand_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to find one brand",
                "tags": [
                    "Admin Brand"
                ],
                "summary": "Find One Brand",
                "operationId": "FindOneBrand",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Brand ID",
                        "name": "brand_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully brand found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to find brand",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to update brand",
                "tags": [
                    "Admin Brand"
                ],
                "summary": "Save Brand",
                "operationId": "UpdateBrand",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Brand ID",
                        "name": "brand_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Brand"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully brand updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to update brand",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to delete brand",
                "tags": [
                    "Admin Brand"
                ],
                "summary": "Save Brand",
                "operationId": "DeleteBrand",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Brand ID",
                        "name": "brand_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully brand deleted",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to delete brand",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/categories": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all categories and their subcategories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "Get all categories (Admin)",
                "operationId": "GetAllCategories",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for Admin to save new category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "Add a new category (Admin)",
                "operationId": "SaveCategory",
                "parameters": [
                    {
                        "description": "Category details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Category"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully added category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Failed to save category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/categories/sub-categories": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add a new sub category for a existing category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "Add a new subcategory (Admin)",
                "operationId": "SaveSubCategory",
                "parameters": [
                    {
                        "description": "Subcategory details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SubCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully added subcategory",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Sub category already exist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to add subcategory",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/categories/{category_id}/variations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all variation and its values of a category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "Get all variations (Admin)",
                "operationId": "GetAllVariations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all variations and its values",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to Get variations and its values",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add new variations for a category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "Add new variations (Admin)",
                "operationId": "SaveVariation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Variation details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Variation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully added variations",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to add variation",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/categories/{category_id}/variations/{variation_id}/options": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add variation options for a variation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Category"
                ],
                "summary": "Add new variation options (Admin)",
                "operationId": "SaveVariationOption",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Variation ID",
                        "name": "variation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Variation option details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.VariationOption"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully added variation options",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to add variation options",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/coupons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all coupons",
                "tags": [
                    "Admin Coupon"
                ],
                "summary": "Get all coupons (Admin)",
                "operationId": "GetAllCouponsAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully go all the coupons",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get all coupons",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin update coupon details",
                "tags": [
                    "Admin Coupon"
                ],
                "summary": "Update Coupon (Admin)",
                "operationId": "UpdateCoupon",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.EditCoupon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the coupon",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add a new coupon",
                "tags": [
                    "Admin Coupon"
                ],
                "summary": "Add coupons (Admin)",
                "operationId": "SaveCoupon",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Coupon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully coupon added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all offers",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Get all offers (Admin)",
                "operationId": "GetAllOffers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully\tfound\tall\toffers",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to get all offers",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add an offer (Admin)",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Add offer (Admin)",
                "operationId": "SaveOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Offer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully offer added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid inputs",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Offer already exist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/category": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all category offers",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Get all category offers (Admin)",
                "operationId": "GetAllCategoryOffers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully got all offer_category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get offers_category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add an offer category",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Add category offer (Admin)",
                "operationId": "SaveCategoryOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OfferCategory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added for category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API admin to change product offer to another offer",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Change product offer (Admin)",
                "operationId": "ChangeCategoryOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateCategoryOffer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer replaced for category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/category/{offer_category_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API admin to remove a offer from category",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Remove category offer (Admin)",
                "operationId": "RemoveCategoryOffer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer Category ID",
                        "name": "offer_category_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added for category",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all product offers",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Get all product offers (Admin)",
                "operationId": "GetAllProductsOffers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully got all offers_categories",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get offer_products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add an offer for product",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Add product offer (Admin)",
                "operationId": "SaveProductOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OfferProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added for product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API admin to change product offer to another offer",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Change product offer (Admin)",
                "operationId": "ChangeProductOffer",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateProductOffer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully offer changed for  given product offer",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/products/{offer_product_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API admin to remove a offer from product",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Remove product offer (Admin)",
                "operationId": "RemoveProductOffer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "offer_product_id",
                        "name": "offer_product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully offer removed from product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input on params",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/offers/{offer_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API admin to remove an offer",
                "tags": [
                    "Admin Offers"
                ],
                "summary": "Remove offer (Admin)",
                "operationId": "RemoveOffer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer ID",
                        "name": "offer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully offer added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to change order status",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "Change order status (Admin)",
                "operationId": "UpdateOrderStatus",
                "parameters": [
                    {
                        "description": "input field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateOrder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully order status updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all orders",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "Get all orders (Admin)",
                "operationId": "GetAllShopOrders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all shop orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No shop order found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all shop orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/returns": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all order returns",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "Get all order returns (Admin)",
                "operationId": "GetAllOrderReturns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all order returns",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all order returns",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/returns/pending": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all pending returns",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "Get all pending returns (Admin)",
                "operationId": "GetAllPendingReturns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all pending orders return requests",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all pending order return requests",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to change status of return requested orders",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "Change return request status (Admin)",
                "operationId": "UpdateReturnRequest",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateOrderReturn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully order_response updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/statuses": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all available order statuses",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "Get all order statuses (Admin)",
                "operationId": "GetAllOrderStatuses",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all order statuses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No order statuses found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all order statuses",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/orders/{shop_order_id}/items": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all order items of a specific order",
                "tags": [
                    "Admin Orders"
                ],
                "summary": "Get all order items (Admin)",
                "operationId": "GetAllOrderItemsAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found order items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No order items found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find order items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/payment-method": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to change maximum price or block or unblock the payment method",
                "tags": [
                    "Admin Payment"
                ],
                "summary": "Update payment method (Admin)",
                "operationId": "UpdatePaymentMethod",
                "responses": {
                    "200": {
                        "description": "Successfully payment method updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid inputs",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update payment method",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/payment-methods": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all payment methods",
                "tags": [
                    "Admin Payment"
                ],
                "summary": "Get payment methods (Admin)",
                "operationId": "GetAllPaymentMethodsAdmin",
                "responses": {
                    "200": {
                        "description": "Failed to retrieve payment methods",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Successfully retrieved all payment methods",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all products",
                "tags": [
                    "Admin Products"
                ],
                "summary": "Get all products (Admin)",
                "operationId": "GetAllProductsAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to Get all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to update a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Products"
                ],
                "summary": "Update a product (Admin)",
                "operationId": "UpdateProduct",
                "parameters": [
                    {
                        "description": "Product update input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully product updated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Failed to update product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Product name already exist for another product",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add a new product",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Products"
                ],
                "summary": "Add a new product (Admin)",
                "operationId": "SaveProduct",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Category Id",
                        "name": "category_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Brand Id",
                        "name": "brand_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product Price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Product Description",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully product added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Product name already exist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/products/{product_id}/items": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all product items for a specific product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Products"
                ],
                "summary": "Get all product items (Admin)",
                "operationId": "GetAllProductItemsAdmin",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get all product items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to get all product items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to add a product item for a specific product(should select at least one variation option from each variations)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Products"
                ],
                "summary": "Add a product item (Admin)",
                "operationId": "SaveProductItem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Quantity In Stock",
                        "name": "qty_in_stock",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Variation Option IDs",
                        "name": "variation_option_ids",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Images",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully product item added",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Product have already this configured product items exist",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/sales": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all sales report for a specific period in csv form",
                "tags": [
                    "Admin Sales"
                ],
                "summary": "Get full sales report (Admin)",
                "operationId": "GetFullSalesReport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sales report starting date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sales report ending date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ecommerce_sales_report.csv",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No sales report found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "failed to get sales report",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/stocks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all stocks",
                "tags": [
                    "Admin Stock"
                ],
                "summary": "Get all stocks (Admin)",
                "operationId": "GetAllStocks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all stocks",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No stocks found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to Get all stocks",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to update stock details",
                "tags": [
                    "Admin Stock"
                ],
                "summary": "Update stocks (Admin)",
                "operationId": "UpdateStock",
                "parameters": [
                    {
                        "description": "Update stock details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateStock"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated sock",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to bind input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update stock",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for admin to get all user details",
                "tags": [
                    "Admin User"
                ],
                "summary": "Get all users",
                "operationId": "GetAllUsers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully got all users",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No users found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find all users",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/admin/users/block": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Admin User"
                ],
                "summary": "api for admin to block or unblock user",
                "operationId": "BlockUser",
                "parameters": [
                    {
                        "description": "inputs",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.BlockUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed block status of user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/google-auth": {
            "get": {
                "description": "API for user to load google login page",
                "tags": [
                    "User Authentication"
                ],
                "summary": "To load google login page (User)",
                "operationId": "UserGoogleAuthLoginPage",
                "responses": {
                    "200": {
                        "description": "Successfully google login page loaded",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/google-auth/callback": {
            "post": {
                "description": "API for google to callback after authentication",
                "tags": [
                    "User Authentication"
                ],
                "summary": "Google auth callback (User)",
                "operationId": "UserGoogleAuthCallBack",
                "responses": {
                    "200": {
                        "description": "Successfully logged in with google",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed Login with google",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/google-auth/initialize": {
            "get": {
                "description": "API for user to initialize google auth",
                "tags": [
                    "User Authentication"
                ],
                "summary": "Initialize google auth (User)",
                "operationId": "UserGoogleAuthInitialize",
                "responses": {}
            }
        },
        "/auth/renew-access-token": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "API for user to renew access token using refresh token",
                "tags": [
                    "User Authentication"
                ],
                "summary": "Renew Access Token (User)",
                "operationId": "UserRenewAccessToken",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RefreshToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully generated access token using refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Refresh token blocked",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "No session found for the given refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "410": {
                        "description": "Refresh token expired",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed generate access token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign-in": {
            "post": {
                "description": "API for user to login with email | phone | user_name with password",
                "tags": [
                    "User Authentication"
                ],
                "summary": "Login with password (User)",
                "operationId": "UserLogin",
                "parameters": [
                    {
                        "description": "Login Details",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.TokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid inputs",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "User not exist with given login credentials",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "User blocked by admin",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to login",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign-in/otp/send": {
            "post": {
                "description": "API for user to send otp for login enter email | phone | user_name : otp will send to user registered number",
                "tags": [
                    "User Authentication"
                ],
                "summary": "Login with Otp send (User)",
                "operationId": "UserLoginOtpSend",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OTPLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully otp send to user's registered number",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid Otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "User not exist with given login credentials",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "User blocked by admin",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to send otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign-in/otp/verify": {
            "post": {
                "description": "API for user to verify otp",
                "tags": [
                    "User Authentication"
                ],
                "summary": "Login with Otp verify (User)",
                "operationId": "UserLoginOtpVerify",
                "parameters": [
                    {
                        "description": "Otp Verify Details",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OTPVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully user logged in",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.TokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid inputs",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Otp not matched",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "410": {
                        "description": "Otp Expired",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to verify otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign-up": {
            "post": {
                "description": "API for user to register a new account",
                "tags": [
                    "User Authentication"
                ],
                "summary": "Signup (User)",
                "operationId": "UserSignUp",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserSignUp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully account created and otp send to registered number",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.OTPResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "A verified user already exist with given user credentials",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to signup",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign-up/verify": {
            "post": {
                "description": "API for user to verify otp on sign up",
                "tags": [
                    "User Authentication"
                ],
                "summary": "UserSingUp verify OTP  (User)",
                "operationId": "UserSignUpVerify",
                "parameters": [
                    {
                        "description": "Otp Verify Details",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OTPVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully otp verified for user sign up",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/response.TokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid inputs",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Otp not matched",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "410": {
                        "description": "Otp Expired",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to verify otp",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all cart items",
                "tags": [
                    "User Cart"
                ],
                "summary": "Get cart Items (User)",
                "operationId": "GetCart",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all cart items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "Cart is empty",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to get user cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to update cart item quantity (minimum qty is 1)",
                "tags": [
                    "User Cart"
                ],
                "summary": "Change Cart Qty (User)",
                "operationId": "UpdateCart",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateCartItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully to update cart item quantity changed in cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update product item in cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/apply-coupon": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to apply a coupon on cart",
                "tags": [
                    "User Cart"
                ],
                "summary": "Apply coupon",
                "operationId": "ApplyCouponToCart",
                "parameters": [
                    {
                        "description": "Input Field",
                        "name": "inputs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ApplyCoupon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully coupon applied to user cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/checkout/payment-select-page": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to render payment select page",
                "tags": [
                    "User Payment"
                ],
                "summary": "Render Payment Page (User)",
                "operationId": "CartOrderPaymentSelectPage",
                "responses": {
                    "200": {
                        "description": "Successfully rendered payment page",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to render payment page",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user save an order",
                "tags": [
                    "User Orders"
                ],
                "summary": "Save Order (User)",
                "operationId": "SaveOrder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully order placed",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "Cart is empty",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Can't place order out of stock product on cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to save order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order/cod": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to place order for cash on delivery",
                "tags": [
                    "User Payment"
                ],
                "summary": "Place order  for COD (User)",
                "operationId": "PaymentCOD",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully order placed for COD",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed place order for COD",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order/razorpay-checkout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "API for user to create stripe payment",
                "tags": [
                    "User Payment"
                ],
                "summary": "Razorpay checkout (User)",
                "operationId": "RazorpayCheckout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully razorpay payment order created",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to make razorpay order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order/razorpay-verify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for razorpay to callback backend for payment verification",
                "tags": [
                    "User Payment"
                ],
                "summary": "Razorpay verify (User)",
                "operationId": "RazorpayVerify",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Razorpay payment id",
                        "name": "razorpay_order_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Razorpay payment id",
                        "name": "razorpay_payment_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Razorpay signature",
                        "name": "razorpay_signature",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully razorpay payment verified",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "402": {
                        "description": "Payment not approved",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to Approve order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order/stripe-checkout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to create stripe payment",
                "tags": [
                    "User Payment"
                ],
                "summary": "Stripe checkout (User)",
                "operationId": "StripPaymentCheckout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully stripe payment order created",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to create stripe order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/place-order/stripe-verify": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to callback backend after stripe payment for verification",
                "tags": [
                    "User Payment"
                ],
                "summary": "Stripe verify (User)",
                "operationId": "StripePaymentVeify",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stripe payment ID",
                        "name": "stripe_payment_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully stripe payment verified",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "402": {
                        "description": "Payment not approved",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to Approve order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/carts/{product_item_id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to add a product item to cart",
                "tags": [
                    "User Cart"
                ],
                "summary": "Add product item to cart (User)",
                "operationId": "AddToCart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product Item ID",
                        "name": "product_item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully product item added to cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Product item in out of stock",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Product item already exist in cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to add product item into cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to remove a product item from cart",
                "tags": [
                    "User Cart"
                ],
                "summary": "Remove product item from cart (User)",
                "operationId": "RemoveFromCart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product Item ID",
                        "name": "product_item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully product item removed form cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Product item not exist in cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to remove product item from cart",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API to get order for user user orders",
                "tags": [
                    "User Orders"
                ],
                "summary": "Get user orders (User)",
                "operationId": "GetUserOrder",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all user orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No shop orders for user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve all user orders",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/orders/return": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to request a return for delivered order",
                "tags": [
                    "User Orders"
                ],
                "summary": "Return request (User)",
                "operationId": "SubmitReturnRequest",
                "parameters": [
                    {
                        "description": "Input Fields",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Return"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully return request submitted for order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/orders/{shop_order_id}/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Api for user to cancel a order",
                "tags": [
                    "User Orders"
                ],
                "summary": "Cancel order (User)",
                "operationId": "CancelOrder",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully order cancelled",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid inputs",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to cancel order",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/orders/{shop_order_id}/items": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all order items of a specific order",
                "tags": [
                    "User Orders"
                ],
                "summary": "Get all order items (User)",
                "operationId": "GetAllOrderItemsUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shop Order ID",
                        "name": "shop_order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count Of Order",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found order items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to find order items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/payment-methods": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all payment methods",
                "tags": [
                    "User Payment"
                ],
                "summary": "Get payment methods (User)",
                "operationId": "GetAllPaymentMethodsUser",
                "responses": {
                    "200": {
                        "description": "Failed to retrieve payment methods",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Successfully retrieved all payment methods",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all products",
                "tags": [
                    "User Products"
                ],
                "summary": "Get all products (User)",
                "operationId": "GetAllProductsUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Count",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to get all products",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/products/{product_id}/items": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "API for user to get all product items for a specific product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Products"
                ],
                "summary": "Get all product items (User)",
                "operationId": "GetAllProductItemsUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully get all product items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to get all product items",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.Address": {
            "type": "object",
            "required": [
                "house",
                "land_mark",
                "name",
                "phone_number",
                "pincode"
            ],
            "properties": {
                "area": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "house": {
                    "type": "string"
                },
                "is_default": {
                    "type": "boolean"
                },
                "land_mark": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "pincode": {
                    "type": "integer"
                }
            }
        },
        "request.ApplyCoupon": {
            "type": "object",
            "required": [
                "coupon_code"
            ],
            "properties": {
                "coupon_code": {
                    "type": "string"
                }
            }
        },
        "request.BlockUser": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "block": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request.Brand": {
            "type": "object",
            "required": [
                "category_name"
            ],
            "properties": {
                "category_name": {
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 3
                }
            }
        },
        "request.Category": {
            "type": "object",
            "required": [
                "category_name"
            ],
            "properties": {
                "category_name": {
                    "type": "string"
                }
            }
        },
        "request.Coupon": {
            "type": "object",
            "required": [
                "coupon_name",
                "description",
                "discount_rate",
                "expire_date",
                "image",
                "minimum_cart_price"
            ],
            "properties": {
                "block_status": {
                    "type": "boolean"
                },
                "coupon_name": {
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 3
                },
                "description": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 6
                },
                "discount_rate": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "expire_date": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "minimum_cart_price": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "request.EditAddress": {
            "type": "object",
            "required": [
                "address_id",
                "house",
                "land_mark",
                "name",
                "phone_number",
                "pincode"
            ],
            "properties": {
                "address_id": {
                    "type": "integer"
                },
                "area": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "house": {
                    "type": "string"
                },
                "is_default": {
                    "type": "boolean"
                },
                "land_mark": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "pincode": {
                    "type": "integer"
                }
            }
        },
        "request.EditCoupon": {
            "type": "object",
            "required": [
                "coupon_name",
                "description",
                "discount_rate",
                "expire_date",
                "image",
                "minimum_cart_price"
            ],
            "properties": {
                "block_status": {
                    "type": "boolean"
                },
                "coupon_id": {
                    "type": "integer"
                },
                "coupon_name": {
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 3
                },
                "description": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 6
                },
                "discount_rate": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "expire_date": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "minimum_cart_price": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "request.EditUser": {
            "type": "object",
            "required": [
                "age",
                "email",
                "first_name",
                "last_name",
                "phone",
                "user_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "request.Login": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 5
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "request.OTPLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 3
                }
            }
        },
        "request.OTPVerify": {
            "type": "object",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 4
                },
                "otp_id": {
                    "type": "string"
                }
            }
        },
        "request.Offer": {
            "type": "object",
            "required": [
                "description",
                "discount_rate",
                "end_date",
                "offer_name",
                "start_date"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 6
                },
                "discount_rate": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "end_date": {
                    "type": "string"
                },
                "offer_name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "request.OfferCategory": {
            "type": "object",
            "required": [
                "category_id",
                "offer_id"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "offer_id": {
                    "type": "integer"
                }
            }
        },
        "request.OfferProduct": {
            "type": "object",
            "required": [
                "offer_id",
                "product_id"
            ],
            "properties": {
                "offer_id": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                }
            }
        },
        "request.RefreshToken": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "minLength": 10
                }
            }
        },
        "request.Return": {
            "type": "object",
            "required": [
                "return_reason",
                "shop_order_id"
            ],
            "properties": {
                "return_reason": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 6
                },
                "shop_order_id": {
                    "type": "integer"
                }
            }
        },
        "request.SubCategory": {
            "type": "object",
            "required": [
                "category_id",
                "category_name"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "category_name": {
                    "type": "string"
                }
            }
        },
        "request.UpdateCartItem": {
            "type": "object",
            "required": [
                "product_item_id"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 1
                },
                "product_item_id": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateCategoryOffer": {
            "type": "object",
            "required": [
                "category_offer_id",
                "offer_id"
            ],
            "properties": {
                "category_offer_id": {
                    "type": "integer"
                },
                "offer_id": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateOrder": {
            "type": "object",
            "required": [
                "shop_order_id"
            ],
            "properties": {
                "order_status_id": {
                    "type": "integer"
                },
                "shop_order_id": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateOrderReturn": {
            "type": "object",
            "required": [
                "admin_comment",
                "order_return_id",
                "order_status_id"
            ],
            "properties": {
                "admin_comment": {
                    "type": "string",
                    "maxLength": 150,
                    "minLength": 6
                },
                "order_return_id": {
                    "type": "integer"
                },
                "order_status_id": {
                    "type": "integer"
                },
                "return_date": {
                    "type": "string"
                }
            }
        },
        "request.UpdateProduct": {
            "type": "object",
            "required": [
                "category_id",
                "description",
                "image",
                "price",
                "product_id",
                "product_name"
            ],
            "properties": {
                "category_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 10
                },
                "image": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "request.UpdateProductOffer": {
            "type": "object",
            "required": [
                "offer_id",
                "product_offer_id"
            ],
            "properties": {
                "offer_id": {
                    "type": "integer"
                },
                "product_offer_id": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateStock": {
            "type": "object",
            "properties": {
                "qty_to_add": {
                    "type": "integer"
                },
                "sku": {
                    "type": "string"
                }
            }
        },
        "request.UserSignUp": {
            "type": "object",
            "required": [
                "age",
                "confirm_password",
                "email",
                "first_name",
                "last_name",
                "password",
                "phone",
                "user_name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "user_name": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 3
                }
            }
        },
        "request.Variation": {
            "type": "object",
            "required": [
                "variation_names"
            ],
            "properties": {
                "variation_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "request.VariationOption": {
            "type": "object",
            "required": [
                "variation_value"
            ],
            "properties": {
                "variation_value": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "response.OTPResponse": {
            "type": "object",
            "properties": {
                "otp_id": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "response.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Add prefix of Bearer before  token Ex: \"Bearer token\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "E-commerce Application Backend API",
	Description:      "Backend API built with Golang using Clean Code architecture. \\nGithub: [https://github.com/shion0625/backend].",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
