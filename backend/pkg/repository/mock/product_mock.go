// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/product.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repository/interfaces/product.go -destination=pkg/repository/mock/product_mock.go
//
// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	v4 "github.com/labstack/echo/v4"
	request "github.com/shion0625/FYP/backend/pkg/api/handler/request"
	response "github.com/shion0625/FYP/backend/pkg/api/handler/response"
	domain "github.com/shion0625/FYP/backend/pkg/domain"
	interfaces "github.com/shion0625/FYP/backend/pkg/repository/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// FindAllMainCategories mocks base method.
func (m *MockProductRepository) FindAllMainCategories(ctx v4.Context, pagination request.Pagination) ([]response.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMainCategories", ctx, pagination)
	ret0, _ := ret[0].([]response.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMainCategories indicates an expected call of FindAllMainCategories.
func (mr *MockProductRepositoryMockRecorder) FindAllMainCategories(ctx, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMainCategories", reflect.TypeOf((*MockProductRepository)(nil).FindAllMainCategories), ctx, pagination)
}

// FindAllProductItemIDsByProductIDAndVariationOptionID mocks base method.
func (m *MockProductRepository) FindAllProductItemIDsByProductIDAndVariationOptionID(ctx context.Context, productID, variationOptionID uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProductItemIDsByProductIDAndVariationOptionID", ctx, productID, variationOptionID)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProductItemIDsByProductIDAndVariationOptionID indicates an expected call of FindAllProductItemIDsByProductIDAndVariationOptionID.
func (mr *MockProductRepositoryMockRecorder) FindAllProductItemIDsByProductIDAndVariationOptionID(ctx, productID, variationOptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProductItemIDsByProductIDAndVariationOptionID", reflect.TypeOf((*MockProductRepository)(nil).FindAllProductItemIDsByProductIDAndVariationOptionID), ctx, productID, variationOptionID)
}

// FindAllProductItemImages mocks base method.
func (m *MockProductRepository) FindAllProductItemImages(ctx v4.Context, productItemID uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProductItemImages", ctx, productItemID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProductItemImages indicates an expected call of FindAllProductItemImages.
func (mr *MockProductRepositoryMockRecorder) FindAllProductItemImages(ctx, productItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProductItemImages", reflect.TypeOf((*MockProductRepository)(nil).FindAllProductItemImages), ctx, productItemID)
}

// FindAllProductItems mocks base method.
func (m *MockProductRepository) FindAllProductItems(ctx v4.Context, productID uint) ([]response.ProductItemsDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProductItems", ctx, productID)
	ret0, _ := ret[0].([]response.ProductItemsDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProductItems indicates an expected call of FindAllProductItems.
func (mr *MockProductRepositoryMockRecorder) FindAllProductItems(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProductItems", reflect.TypeOf((*MockProductRepository)(nil).FindAllProductItems), ctx, productID)
}

// FindAllProducts mocks base method.
func (m *MockProductRepository) FindAllProducts(ctx v4.Context, pagination request.Pagination, categoryID, brandID *uint) ([]response.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProducts", ctx, pagination, categoryID, brandID)
	ret0, _ := ret[0].([]response.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProducts indicates an expected call of FindAllProducts.
func (mr *MockProductRepositoryMockRecorder) FindAllProducts(ctx, pagination, categoryID, brandID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockProductRepository)(nil).FindAllProducts), ctx, pagination, categoryID, brandID)
}

// FindAllVariationOptionsByVariationID mocks base method.
func (m *MockProductRepository) FindAllVariationOptionsByVariationID(ctx v4.Context, variationID uint) ([]response.VariationOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVariationOptionsByVariationID", ctx, variationID)
	ret0, _ := ret[0].([]response.VariationOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVariationOptionsByVariationID indicates an expected call of FindAllVariationOptionsByVariationID.
func (mr *MockProductRepositoryMockRecorder) FindAllVariationOptionsByVariationID(ctx, variationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVariationOptionsByVariationID", reflect.TypeOf((*MockProductRepository)(nil).FindAllVariationOptionsByVariationID), ctx, variationID)
}

// FindAllVariationValuesOfProductItem mocks base method.
func (m *MockProductRepository) FindAllVariationValuesOfProductItem(ctx v4.Context, productItemID uint) ([]response.ProductVariationValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVariationValuesOfProductItem", ctx, productItemID)
	ret0, _ := ret[0].([]response.ProductVariationValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVariationValuesOfProductItem indicates an expected call of FindAllVariationValuesOfProductItem.
func (mr *MockProductRepositoryMockRecorder) FindAllVariationValuesOfProductItem(ctx, productItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVariationValuesOfProductItem", reflect.TypeOf((*MockProductRepository)(nil).FindAllVariationValuesOfProductItem), ctx, productItemID)
}

// FindAllVariationsByCategoryID mocks base method.
func (m *MockProductRepository) FindAllVariationsByCategoryID(ctx v4.Context, categoryID uint) ([]response.Variation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVariationsByCategoryID", ctx, categoryID)
	ret0, _ := ret[0].([]response.Variation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVariationsByCategoryID indicates an expected call of FindAllVariationsByCategoryID.
func (mr *MockProductRepositoryMockRecorder) FindAllVariationsByCategoryID(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVariationsByCategoryID", reflect.TypeOf((*MockProductRepository)(nil).FindAllVariationsByCategoryID), ctx, categoryID)
}

// FindProductByID mocks base method.
func (m *MockProductRepository) FindProductByID(ctx v4.Context, productID uint) (response.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductByID", ctx, productID)
	ret0, _ := ret[0].(response.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductByID indicates an expected call of FindProductByID.
func (mr *MockProductRepositoryMockRecorder) FindProductByID(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductByID", reflect.TypeOf((*MockProductRepository)(nil).FindProductByID), ctx, productID)
}

// FindProductItemByID mocks base method.
func (m *MockProductRepository) FindProductItemByID(ctx v4.Context, productItemID uint) (domain.ProductItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductItemByID", ctx, productItemID)
	ret0, _ := ret[0].(domain.ProductItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductItemByID indicates an expected call of FindProductItemByID.
func (mr *MockProductRepositoryMockRecorder) FindProductItemByID(ctx, productItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductItemByID", reflect.TypeOf((*MockProductRepository)(nil).FindProductItemByID), ctx, productItemID)
}

// FindVariationCountForProduct mocks base method.
func (m *MockProductRepository) FindVariationCountForProduct(ctx v4.Context, productID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVariationCountForProduct", ctx, productID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVariationCountForProduct indicates an expected call of FindVariationCountForProduct.
func (mr *MockProductRepositoryMockRecorder) FindVariationCountForProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVariationCountForProduct", reflect.TypeOf((*MockProductRepository)(nil).FindVariationCountForProduct), ctx, productID)
}

// IsCategoryNameExist mocks base method.
func (m *MockProductRepository) IsCategoryNameExist(ctx v4.Context, categoryName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCategoryNameExist", ctx, categoryName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCategoryNameExist indicates an expected call of IsCategoryNameExist.
func (mr *MockProductRepositoryMockRecorder) IsCategoryNameExist(ctx, categoryName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCategoryNameExist", reflect.TypeOf((*MockProductRepository)(nil).IsCategoryNameExist), ctx, categoryName)
}

// IsProductNameExist mocks base method.
func (m *MockProductRepository) IsProductNameExist(ctx v4.Context, productName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProductNameExist", ctx, productName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProductNameExist indicates an expected call of IsProductNameExist.
func (mr *MockProductRepositoryMockRecorder) IsProductNameExist(ctx, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProductNameExist", reflect.TypeOf((*MockProductRepository)(nil).IsProductNameExist), ctx, productName)
}

// IsProductNameExistForOtherProduct mocks base method.
func (m *MockProductRepository) IsProductNameExistForOtherProduct(ctx v4.Context, name string, productID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProductNameExistForOtherProduct", ctx, name, productID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProductNameExistForOtherProduct indicates an expected call of IsProductNameExistForOtherProduct.
func (mr *MockProductRepositoryMockRecorder) IsProductNameExistForOtherProduct(ctx, name, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProductNameExistForOtherProduct", reflect.TypeOf((*MockProductRepository)(nil).IsProductNameExistForOtherProduct), ctx, name, productID)
}

// IsVariationNameExistForCategory mocks base method.
func (m *MockProductRepository) IsVariationNameExistForCategory(ctx v4.Context, name string, categoryID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVariationNameExistForCategory", ctx, name, categoryID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVariationNameExistForCategory indicates an expected call of IsVariationNameExistForCategory.
func (mr *MockProductRepositoryMockRecorder) IsVariationNameExistForCategory(ctx, name, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVariationNameExistForCategory", reflect.TypeOf((*MockProductRepository)(nil).IsVariationNameExistForCategory), ctx, name, categoryID)
}

// IsVariationValueExistForVariation mocks base method.
func (m *MockProductRepository) IsVariationValueExistForVariation(ctx v4.Context, value string, variationID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVariationValueExistForVariation", ctx, value, variationID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsVariationValueExistForVariation indicates an expected call of IsVariationValueExistForVariation.
func (mr *MockProductRepositoryMockRecorder) IsVariationValueExistForVariation(ctx, value, variationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVariationValueExistForVariation", reflect.TypeOf((*MockProductRepository)(nil).IsVariationValueExistForVariation), ctx, value, variationID)
}

// SaveCategory mocks base method.
func (m *MockProductRepository) SaveCategory(ctx v4.Context, categoryName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCategory", ctx, categoryName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCategory indicates an expected call of SaveCategory.
func (mr *MockProductRepositoryMockRecorder) SaveCategory(ctx, categoryName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCategory", reflect.TypeOf((*MockProductRepository)(nil).SaveCategory), ctx, categoryName)
}

// SaveProduct mocks base method.
func (m *MockProductRepository) SaveProduct(ctx v4.Context, product domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockProductRepositoryMockRecorder) SaveProduct(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockProductRepository)(nil).SaveProduct), ctx, product)
}

// SaveProductConfiguration mocks base method.
func (m *MockProductRepository) SaveProductConfiguration(ctx v4.Context, productItemID, variationOptionID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProductConfiguration", ctx, productItemID, variationOptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProductConfiguration indicates an expected call of SaveProductConfiguration.
func (mr *MockProductRepositoryMockRecorder) SaveProductConfiguration(ctx, productItemID, variationOptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProductConfiguration", reflect.TypeOf((*MockProductRepository)(nil).SaveProductConfiguration), ctx, productItemID, variationOptionID)
}

// SaveProductItem mocks base method.
func (m *MockProductRepository) SaveProductItem(ctx v4.Context, productItem domain.ProductItem) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProductItem", ctx, productItem)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProductItem indicates an expected call of SaveProductItem.
func (mr *MockProductRepositoryMockRecorder) SaveProductItem(ctx, productItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProductItem", reflect.TypeOf((*MockProductRepository)(nil).SaveProductItem), ctx, productItem)
}

// SaveProductItemImage mocks base method.
func (m *MockProductRepository) SaveProductItemImage(ctx v4.Context, productItemID uint, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProductItemImage", ctx, productItemID, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProductItemImage indicates an expected call of SaveProductItemImage.
func (mr *MockProductRepositoryMockRecorder) SaveProductItemImage(ctx, productItemID, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProductItemImage", reflect.TypeOf((*MockProductRepository)(nil).SaveProductItemImage), ctx, productItemID, image)
}

// SaveVariation mocks base method.
func (m *MockProductRepository) SaveVariation(ctx v4.Context, categoryID uint, variationName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVariation", ctx, categoryID, variationName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVariation indicates an expected call of SaveVariation.
func (mr *MockProductRepositoryMockRecorder) SaveVariation(ctx, categoryID, variationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVariation", reflect.TypeOf((*MockProductRepository)(nil).SaveVariation), ctx, categoryID, variationName)
}

// SaveVariationOption mocks base method.
func (m *MockProductRepository) SaveVariationOption(ctx v4.Context, variationID uint, variationValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVariationOption", ctx, variationID, variationValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVariationOption indicates an expected call of SaveVariationOption.
func (mr *MockProductRepositoryMockRecorder) SaveVariationOption(ctx, variationID, variationValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVariationOption", reflect.TypeOf((*MockProductRepository)(nil).SaveVariationOption), ctx, variationID, variationValue)
}

// Transactions mocks base method.
func (m *MockProductRepository) Transactions(ctx v4.Context, trxFn func(interfaces.ProductRepository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transactions", ctx, trxFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transactions indicates an expected call of Transactions.
func (mr *MockProductRepositoryMockRecorder) Transactions(ctx, trxFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transactions", reflect.TypeOf((*MockProductRepository)(nil).Transactions), ctx, trxFn)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(ctx v4.Context, product domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), ctx, product)
}
