// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/order.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repository/interfaces/order.go -destination=pkg/repository/mock/order_mock.go
//
// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	v4 "github.com/labstack/echo/v4"
	request "github.com/shion0625/FYP/backend/pkg/api/handler/request"
	interfaces "github.com/shion0625/FYP/backend/pkg/repository/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// PayOrder mocks base method.
func (m *MockOrderRepository) PayOrder(ctx v4.Context, payOrder request.PayOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayOrder", ctx, payOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayOrder indicates an expected call of PayOrder.
func (mr *MockOrderRepositoryMockRecorder) PayOrder(ctx, payOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayOrder", reflect.TypeOf((*MockOrderRepository)(nil).PayOrder), ctx, payOrder)
}

// SaveOrder mocks base method.
func (m *MockOrderRepository) SaveOrder(ctx v4.Context, payOrder request.PayOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, payOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderRepositoryMockRecorder) SaveOrder(ctx, payOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderRepository)(nil).SaveOrder), ctx, payOrder)
}

// Transactions mocks base method.
func (m *MockOrderRepository) Transactions(ctx v4.Context, trxFn func(interfaces.OrderRepository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transactions", ctx, trxFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transactions indicates an expected call of Transactions.
func (mr *MockOrderRepositoryMockRecorder) Transactions(ctx, trxFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transactions", reflect.TypeOf((*MockOrderRepository)(nil).Transactions), ctx, trxFn)
}

// UpdateProductItemStock mocks base method.
func (m *MockOrderRepository) UpdateProductItemStock(ctx v4.Context, productItemID, purchaseQuantity uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductItemStock", ctx, productItemID, purchaseQuantity)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductItemStock indicates an expected call of UpdateProductItemStock.
func (mr *MockOrderRepositoryMockRecorder) UpdateProductItemStock(ctx, productItemID, purchaseQuantity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductItemStock", reflect.TypeOf((*MockOrderRepository)(nil).UpdateProductItemStock), ctx, productItemID, purchaseQuantity)
}
