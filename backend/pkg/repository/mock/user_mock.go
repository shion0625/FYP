// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/user.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repository/interfaces/user.go -destination=pkg/repository/mock/user_mock.go
//
// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	v4 "github.com/labstack/echo/v4"
	response "github.com/shion0625/FYP/backend/pkg/api/handler/response"
	domain "github.com/shion0625/FYP/backend/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindAllAddressByUserID mocks base method.
func (m *MockUserRepository) FindAllAddressByUserID(ctx v4.Context, userID string) ([]response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAddressByUserID", ctx, userID)
	ret0, _ := ret[0].([]response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAddressByUserID indicates an expected call of FindAllAddressByUserID.
func (mr *MockUserRepositoryMockRecorder) FindAllAddressByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAddressByUserID", reflect.TypeOf((*MockUserRepository)(nil).FindAllAddressByUserID), ctx, userID)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepository) FindUserByEmail(ctx v4.Context, email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryMockRecorder) FindUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindUserByEmail), ctx, email)
}

// FindUserByPhoneNumber mocks base method.
func (m *MockUserRepository) FindUserByPhoneNumber(ctx v4.Context, phoneNumber string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByPhoneNumber indicates an expected call of FindUserByPhoneNumber.
func (mr *MockUserRepositoryMockRecorder) FindUserByPhoneNumber(ctx, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhoneNumber", reflect.TypeOf((*MockUserRepository)(nil).FindUserByPhoneNumber), ctx, phoneNumber)
}

// FindUserByUserID mocks base method.
func (m *MockUserRepository) FindUserByUserID(ctx v4.Context, userID string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUserID", ctx, userID)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUserID indicates an expected call of FindUserByUserID.
func (mr *MockUserRepositoryMockRecorder) FindUserByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUserID", reflect.TypeOf((*MockUserRepository)(nil).FindUserByUserID), ctx, userID)
}

// FindUserByUserName mocks base method.
func (m *MockUserRepository) FindUserByUserName(ctx v4.Context, userName string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUserName", ctx, userName)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUserName indicates an expected call of FindUserByUserName.
func (mr *MockUserRepositoryMockRecorder) FindUserByUserName(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUserName", reflect.TypeOf((*MockUserRepository)(nil).FindUserByUserName), ctx, userName)
}

// FindUserByUserNameEmailOrPhone mocks base method.
func (m *MockUserRepository) FindUserByUserNameEmailOrPhone(ctx v4.Context, user domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUserNameEmailOrPhone", ctx, user)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUserNameEmailOrPhone indicates an expected call of FindUserByUserNameEmailOrPhone.
func (mr *MockUserRepositoryMockRecorder) FindUserByUserNameEmailOrPhone(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUserNameEmailOrPhone", reflect.TypeOf((*MockUserRepository)(nil).FindUserByUserNameEmailOrPhone), ctx, user)
}

// IsAddressAlreadyExistForUser mocks base method.
func (m *MockUserRepository) IsAddressAlreadyExistForUser(ctx v4.Context, address domain.Address, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressAlreadyExistForUser", ctx, address, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAddressAlreadyExistForUser indicates an expected call of IsAddressAlreadyExistForUser.
func (mr *MockUserRepositoryMockRecorder) IsAddressAlreadyExistForUser(ctx, address, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressAlreadyExistForUser", reflect.TypeOf((*MockUserRepository)(nil).IsAddressAlreadyExistForUser), ctx, address, userID)
}

// IsAddressIDExist mocks base method.
func (m *MockUserRepository) IsAddressIDExist(ctx v4.Context, addressID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressIDExist", ctx, addressID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAddressIDExist indicates an expected call of IsAddressIDExist.
func (mr *MockUserRepositoryMockRecorder) IsAddressIDExist(ctx, addressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressIDExist", reflect.TypeOf((*MockUserRepository)(nil).IsAddressIDExist), ctx, addressID)
}

// SaveAddress mocks base method.
func (m *MockUserRepository) SaveAddress(ctx v4.Context, address domain.Address) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAddress", ctx, address)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAddress indicates an expected call of SaveAddress.
func (mr *MockUserRepositoryMockRecorder) SaveAddress(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAddress", reflect.TypeOf((*MockUserRepository)(nil).SaveAddress), ctx, address)
}

// SaveUser mocks base method.
func (m *MockUserRepository) SaveUser(ctx v4.Context, user domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserRepositoryMockRecorder) SaveUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserRepository)(nil).SaveUser), ctx, user)
}

// SaveUserAddress mocks base method.
func (m *MockUserRepository) SaveUserAddress(ctx v4.Context, userAdress domain.UserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAddress", ctx, userAdress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserAddress indicates an expected call of SaveUserAddress.
func (mr *MockUserRepositoryMockRecorder) SaveUserAddress(ctx, userAdress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAddress", reflect.TypeOf((*MockUserRepository)(nil).SaveUserAddress), ctx, userAdress)
}

// UpdateAddress mocks base method.
func (m *MockUserRepository) UpdateAddress(ctx v4.Context, address domain.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserRepositoryMockRecorder) UpdateAddress(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserRepository)(nil).UpdateAddress), ctx, address)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx v4.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user)
}

// UpdateUserAddress mocks base method.
func (m *MockUserRepository) UpdateUserAddress(ctx v4.Context, userAddress domain.UserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAddress", ctx, userAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAddress indicates an expected call of UpdateUserAddress.
func (mr *MockUserRepositoryMockRecorder) UpdateUserAddress(ctx, userAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAddress", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserAddress), ctx, userAddress)
}
