// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/product.go
//
// Generated by this command:
//
//	mockgen -source=pkg/usecase/interfaces/product.go -destination=pkg/usecase/mock/product_mock.go
//
// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	request "github.com/shion0625/FYP/backend/pkg/api/handler/request"
	response "github.com/shion0625/FYP/backend/pkg/api/handler/response"
	domain "github.com/shion0625/FYP/backend/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProductUseCase is a mock of ProductUseCase interface.
type MockProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUseCaseMockRecorder
}

// MockProductUseCaseMockRecorder is the mock recorder for MockProductUseCase.
type MockProductUseCaseMockRecorder struct {
	mock *MockProductUseCase
}

// NewMockProductUseCase creates a new mock instance.
func NewMockProductUseCase(ctrl *gomock.Controller) *MockProductUseCase {
	mock := &MockProductUseCase{ctrl: ctrl}
	mock.recorder = &MockProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUseCase) EXPECT() *MockProductUseCaseMockRecorder {
	return m.recorder
}

// FindAllCategories mocks base method.
func (m *MockProductUseCase) FindAllCategories(ctx echo.Context, pagination request.Pagination) ([]response.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCategories", ctx, pagination)
	ret0, _ := ret[0].([]response.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCategories indicates an expected call of FindAllCategories.
func (mr *MockProductUseCaseMockRecorder) FindAllCategories(ctx, pagination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCategories", reflect.TypeOf((*MockProductUseCase)(nil).FindAllCategories), ctx, pagination)
}

// FindAllProductItems mocks base method.
func (m *MockProductUseCase) FindAllProductItems(ctx echo.Context, productID uint) ([]response.ProductItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProductItems", ctx, productID)
	ret0, _ := ret[0].([]response.ProductItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProductItems indicates an expected call of FindAllProductItems.
func (mr *MockProductUseCaseMockRecorder) FindAllProductItems(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProductItems", reflect.TypeOf((*MockProductUseCase)(nil).FindAllProductItems), ctx, productID)
}

// FindAllProducts mocks base method.
func (m *MockProductUseCase) FindAllProducts(ctx echo.Context, pagination request.Pagination, categoryID, brandID *uint) ([]response.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProducts", ctx, pagination, categoryID, brandID)
	ret0, _ := ret[0].([]response.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProducts indicates an expected call of FindAllProducts.
func (mr *MockProductUseCaseMockRecorder) FindAllProducts(ctx, pagination, categoryID, brandID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockProductUseCase)(nil).FindAllProducts), ctx, pagination, categoryID, brandID)
}

// FindAllVariationsAndItsValues mocks base method.
func (m *MockProductUseCase) FindAllVariationsAndItsValues(ctx echo.Context, categoryID uint) ([]response.Variation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllVariationsAndItsValues", ctx, categoryID)
	ret0, _ := ret[0].([]response.Variation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllVariationsAndItsValues indicates an expected call of FindAllVariationsAndItsValues.
func (mr *MockProductUseCaseMockRecorder) FindAllVariationsAndItsValues(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllVariationsAndItsValues", reflect.TypeOf((*MockProductUseCase)(nil).FindAllVariationsAndItsValues), ctx, categoryID)
}

// GetProduct mocks base method.
func (m *MockProductUseCase) GetProduct(ctx echo.Context, productID uint) (response.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, productID)
	ret0, _ := ret[0].(response.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductUseCaseMockRecorder) GetProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductUseCase)(nil).GetProduct), ctx, productID)
}

// SaveCategory mocks base method.
func (m *MockProductUseCase) SaveCategory(ctx echo.Context, categoryName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCategory", ctx, categoryName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCategory indicates an expected call of SaveCategory.
func (mr *MockProductUseCaseMockRecorder) SaveCategory(ctx, categoryName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCategory", reflect.TypeOf((*MockProductUseCase)(nil).SaveCategory), ctx, categoryName)
}

// SaveProduct mocks base method.
func (m *MockProductUseCase) SaveProduct(ctx echo.Context, product request.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockProductUseCaseMockRecorder) SaveProduct(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockProductUseCase)(nil).SaveProduct), ctx, product)
}

// SaveProductItem mocks base method.
func (m *MockProductUseCase) SaveProductItem(ctx echo.Context, productID uint, productItem request.ProductItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProductItem", ctx, productID, productItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProductItem indicates an expected call of SaveProductItem.
func (mr *MockProductUseCaseMockRecorder) SaveProductItem(ctx, productID, productItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProductItem", reflect.TypeOf((*MockProductUseCase)(nil).SaveProductItem), ctx, productID, productItem)
}

// SaveVariation mocks base method.
func (m *MockProductUseCase) SaveVariation(ctx echo.Context, categoryID uint, variationNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVariation", ctx, categoryID, variationNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVariation indicates an expected call of SaveVariation.
func (mr *MockProductUseCaseMockRecorder) SaveVariation(ctx, categoryID, variationNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVariation", reflect.TypeOf((*MockProductUseCase)(nil).SaveVariation), ctx, categoryID, variationNames)
}

// SaveVariationOption mocks base method.
func (m *MockProductUseCase) SaveVariationOption(ctx echo.Context, variationID uint, variationOptionValues []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVariationOption", ctx, variationID, variationOptionValues)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVariationOption indicates an expected call of SaveVariationOption.
func (mr *MockProductUseCaseMockRecorder) SaveVariationOption(ctx, variationID, variationOptionValues any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVariationOption", reflect.TypeOf((*MockProductUseCase)(nil).SaveVariationOption), ctx, variationID, variationOptionValues)
}

// UpdateProduct mocks base method.
func (m *MockProductUseCase) UpdateProduct(ctx echo.Context, product domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductUseCaseMockRecorder) UpdateProduct(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductUseCase)(nil).UpdateProduct), ctx, product)
}
